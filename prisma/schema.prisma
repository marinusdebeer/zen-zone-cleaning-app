// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  STAFF
}

model Organization {
  id       String @id @default(cuid())
  name     String
  slug     String @unique
  industry String
  settings Json   @default("{}")

  // Relations
  memberships Membership[]
  leads       Lead[]
  clients     Client[]
  properties  Property[]
  estimates   Estimate[]
  jobs        Job[]
  visits      Visit[]
  lineItems   LineItem[]
  invoices    Invoice[]
  payments    Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String
  passwordHash String?
  isSuperAdmin Boolean @default(false)

  // Relations
  memberships Membership[]
  accounts    Account[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Membership {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   Role

  // Relations
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, orgId])
  @@map("memberships")
}

model Lead {
  id              String  @id @default(cuid())
  orgId           String
  name            String
  emails          Json    @default("[]")
  phones          Json    @default("[]")
  addresses       Json    @default("[]")
  source          String? // referral, website, phone, etc.
  status          String  @default("New") // New, Contacted, Qualified, Lost
  notes           String?
  custom          Json    @default("{}")
  convertedToClientId String? @unique

  // Relations
  org            Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  convertedClient Client?      @relation("LeadConversion")
  estimates      Estimate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("leads")
}

model Client {
  id              String  @id @default(cuid())
  orgId           String
  name            String
  emails          Json    @default("[]")
  phones          Json    @default("[]")
  addresses       Json    @default("[]")
  custom          Json    @default("{}")
  convertedFromLeadId String? @unique

  // Relations
  org            Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  convertedFromLead Lead?     @relation("LeadConversion", fields: [convertedFromLeadId], references: [id], onDelete: SetNull)
  properties     Property[]
  estimates      Estimate[]
  jobs           Job[]
  invoices       Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model Property {
  id       String  @id @default(cuid())
  orgId    String
  clientId String
  address  String
  notes    String?
  custom   Json    @default("{}")

  // Relations
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client    Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  estimates Estimate[]
  jobs      Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties")
}

model Estimate {
  id              String    @id @default(cuid())
  orgId           String
  leadId          String?
  clientId        String?
  propertyId      String?
  title           String
  description     String?
  amount          Decimal   @db.Decimal(12, 2)
  status          String    @default("Draft") // Draft, Sent, Approved, Rejected, Converted
  validUntil      DateTime?
  convertedToJobId String?  @unique
  custom          Json      @default("{}")

  // Relations
  org             Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  lead            Lead?        @relation(fields: [leadId], references: [id], onDelete: SetNull)
  client          Client?      @relation(fields: [clientId], references: [id], onDelete: SetNull)
  property        Property?    @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  convertedJob    Job?         @relation("EstimateConversion")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("estimates")
}

model Job {
  id                    String    @id @default(cuid())
  orgId                 String
  clientId              String
  propertyId            String?
  title                 String
  description           String?
  status                String    @default("Draft") // Draft, Active, Completed, Canceled
  isRecurring           Boolean   @default(false)
  recurringPattern      String?   // daily, weekly, biweekly, monthly
  recurringDays         Json?     // [0,1,2,3,4,5,6] for days of week
  recurringEndDate      DateTime?
  estimatedCost         Decimal?  @db.Decimal(12, 2)
  priority              String    @default("normal") // low, normal, high, urgent
  convertedFromEstimateId String? @unique
  custom                Json      @default("{}")

  // Relations
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client            Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property          Property?    @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  convertedFromEstimate Estimate? @relation("EstimateConversion", fields: [convertedFromEstimateId], references: [id], onDelete: SetNull)
  visits            Visit[]
  lineItems         LineItem[]
  invoices          Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

model Visit {
  id            String    @id @default(cuid())
  orgId         String
  jobId         String
  scheduledAt   DateTime
  completedAt   DateTime?
  status        String    @default("Scheduled") // Scheduled, InProgress, Completed, Canceled, NoShow
  assignees     Json      @default("[]")
  notes         String?
  isManual      Boolean   @default(false) // True if manually added to recurring job
  custom        Json      @default("{}")

  // Relations
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job       Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  invoices  Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visits")
}

model LineItem {
  id        String  @id @default(cuid())
  orgId     String
  jobId     String
  name      String
  qty       Int
  unitPrice Decimal @db.Decimal(12, 2)
  taxRate   Decimal? @db.Decimal(5, 2)

  // Relations
  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("line_items")
}

model Invoice {
  id            String    @id @default(cuid())
  orgId         String
  jobId         String
  clientId      String
  visitIds      Json      @default("[]") // Array of visit IDs included in this invoice
  subtotal      Decimal   @db.Decimal(12, 2)
  taxAmount     Decimal   @db.Decimal(12, 2)
  total         Decimal   @db.Decimal(12, 2)
  status        String    @default("Draft") // Draft, Sent, Paid, Overdue, Canceled
  issuedAt      DateTime?
  dueAt         DateTime?
  paidAt        DateTime?

  // Relations
  org      Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job      Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  client   Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  visits   Visit[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model Payment {
  id          String   @id @default(cuid())
  orgId       String
  invoiceId   String
  amount      Decimal  @db.Decimal(12, 2)
  method      String   // cash, credit_card, debit, etransfer, check
  reference   String?  // transaction ID, check number, etc.
  notes       String?
  paidAt      DateTime @default(now())

  // Relations
  org     Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  invoice Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Auth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}