// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  STAFF
}

model Organization {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  industry String
  timezone String? @default("America/Toronto")
  settings Json    @default("{}")
  
  // No custom theming - all tenants use default colors

  // Relations
  memberships Membership[]
  clients     Client[]
  properties  Property[]
  requests    Request[]
  estimates   Estimate[]
  jobs        Job[]
  visits      Visit[]
  expenses    Expense[]
  invoices    Invoice[]
  payments    Payment[]
  activities  Activity[]
  files       File[]
  counters    OrgCounter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String
  passwordHash String?
  isSuperAdmin Boolean @default(false)
  custom       Json    @default("{}")

  // Relations
  memberships Membership[]
  accounts    Account[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Membership {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   Role

  // Relations
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, orgId])
  @@map("memberships")
}

model Client {
  id            String  @id @default(cuid())
  number        Int     // Auto-incrementing display number (per-org unique)
  orgId         String
  
  // Name fields - can be individual or company
  firstName     String?
  lastName      String?
  companyName   String?
  
  emails        Json    @default("[]")
  phones        Json    @default("[]")
  addresses     Json    @default("[]")
  
  // Client lifecycle status
  clientStatus  String  @default("LEAD") // LEAD, ACTIVE, INACTIVE, ARCHIVED
  
  // Lead-specific fields (only used when clientStatus = "LEAD")
  leadSource    String? // "website", "phone", "referral", "email", etc.
  leadStatus    String  @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED, LOST
  
  notes         String?
  custom        Json    @default("{}")

  // Relations
  org           Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  properties    Property[]
  requests      Request[]
  estimates     Estimate[]
  jobs          Job[]
  invoices      Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@map("clients")
}

model Property {
  id       String  @id @default(cuid())
  orgId    String
  clientId String
  address  String
  notes    String?
  custom   Json    @default("{}")

  // Relations
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client    Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  requests  Request[]
  estimates Estimate[]
  jobs      Job[]
  invoices  Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties")
}

model Request {
  id              String    @id @default(cuid())
  number          Int       // Auto-incrementing display number (per-org unique)
  orgId           String
  clientId        String    // Every request is from a client (with clientStatus LEAD or ACTIVE)
  propertyId      String?
  title           String
  description     String?
  source          String?   // "website", "phone", "email", "referral", etc.
  urgency         String    @default("normal") // low, normal, high, urgent
  status          String    @default("NEW") // NEW, CONTACTED, QUOTED, CONVERTED, DECLINED
  notes           String?
  custom          Json      @default("{}")
  
  // Flexible form data with normalized lookups
  industryId      String?
  serviceTypeId   String?
  hearAboutId     String?
  details         Json      @default("{}") // Full form snapshot with evolving fields
  preferredAt     DateTime? // Preferred service date/time
  
  // Conversion tracking (data independence - one-way references)
  convertedToEstimateId String? @unique
  convertedToJobId      String? @unique

  // Relations
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client            Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property          Property?    @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  industry          Industry?    @relation(fields: [industryId], references: [id], onDelete: SetNull)
  serviceType       ServiceType? @relation(fields: [serviceTypeId], references: [id], onDelete: SetNull)
  hearAbout         HearAbout?   @relation(fields: [hearAboutId], references: [id], onDelete: SetNull)
  lineItems         RequestLineItem[]
  convertedEstimate Estimate?    @relation("RequestToEstimate")
  convertedJob      Job?         @relation("RequestToJob")
  activities        Activity[]
  files             File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@index([industryId])
  @@index([serviceTypeId])
  @@index([status])
  @@index([createdAt])
  @@index([preferredAt])
  @@map("requests")
}

model RequestLineItem {
  id          String   @id @default(cuid())
  requestId   String
  name        String
  description String?
  quantity    Decimal  @default(1) @db.Decimal(10, 2)
  order       Int      @default(0)

  // Relations
  request     Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("request_line_items")
}

model Estimate {
  id              String    @id @default(cuid())
  number          Int       // Auto-incrementing estimate number (per-org unique)
  orgId           String
  clientId        String    // Every estimate is for a client (LEAD or ACTIVE)
  propertyId      String?
  title           String
  description     String?
  
  // Pricing (calculated from line items at runtime)
  taxRate         Decimal   @default(13) @db.Decimal(5, 2) // Default tax rate (e.g., 13 for 13%)
  
  // Deposit settings (optional)
  depositRequired Boolean   @default(false)
  depositType     String?   // "percentage" or "fixed"
  depositValue    Decimal?  @db.Decimal(12, 2)
  
  status          String    @default("DRAFT") // DRAFT, SENT, APPROVED, REJECTED, CONVERTED
  validUntil      DateTime?
  notes           String?
  custom          Json      @default("{}")
  
  // Conversion tracking (data independence)
  convertedFromRequestId String? @unique
  convertedToJobId       String? @unique

  // Relations
  org                  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client               Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property             Property?    @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  convertedFromRequest Request?     @relation("RequestToEstimate", fields: [convertedFromRequestId], references: [id], onDelete: SetNull)
  convertedJob         Job?         @relation("EstimateToJob")
  lineItems            EstimateLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@map("estimates")
}

model EstimateLineItem {
  id          String   @id @default(cuid())
  estimateId  String
  name        String
  description String?
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  order       Int      @default(0)

  // Relations
  estimate    Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("estimate_line_items")
}

model Job {
  id                    String    @id @default(cuid())
  number                Int       // Auto-incrementing job number (per-org unique)
  orgId                 String
  clientId              String    // Required - must have client
  propertyId            String?
  title                 String?
  description           String?
  status                String    @default("Draft") // Draft, Active, Completed, Canceled, Archived
  
  // Scheduling
  isRecurring           Boolean   @default(false)
  recurringPattern      String?   // daily, weekly, biweekly, monthly
  recurringDays         Json?     // [0,1,2,3,4,5,6] for days of week
  startDate             DateTime?
  startTime             String?   // Time in HH:mm format (e.g., "14:00")
  duration              Int       @default(120) // Duration in minutes (default 2 hours)
  recurringEndDate      DateTime?
  
  // Pricing (calculated from line items at runtime)
  taxRate               Decimal   @default(13) @db.Decimal(5, 2) // Default tax rate (e.g., 13 for 13%)
  
  billingFrequency      String    @default("PER_VISIT") // AT_COMPLETION, PER_VISIT, WEEKLY, MONTHLY
  priority              String    @default("normal") // low, normal, high, urgent
  assignees             Json      @default("[]") // Team member user IDs assigned to this job
  notes                 String?
  custom                Json      @default("{}")
  
  // Conversion tracking (data independence)
  convertedFromRequestId  String? @unique
  convertedFromEstimateId String? @unique

  // Relations
  org                   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client                Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property              Property?    @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  convertedFromRequest  Request?     @relation("RequestToJob", fields: [convertedFromRequestId], references: [id], onDelete: SetNull)
  convertedFromEstimate Estimate?    @relation("EstimateToJob", fields: [convertedFromEstimateId], references: [id], onDelete: SetNull)
  visits                Visit[]
  lineItems             JobLineItem[]
  expenses              Expense[]
  invoices              Invoice[]
  files                 File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@map("jobs")
}

model JobLineItem {
  id          String   @id @default(cuid())
  jobId       String
  name        String
  description String?
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  order       Int      @default(0)

  // Relations
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("job_line_items")
}

model Visit {
  id            String    @id @default(cuid())
  number        Int       // Auto-incrementing display number (per-org unique)
  orgId         String
  jobId         String
  invoiceId     String?   // Which invoice this visit belongs to (null if not invoiced yet)
  scheduledAt   DateTime
  duration      Int       @default(120) // Duration in minutes (default 2 hours)
  completedAt   DateTime?
  status        String    @default("Scheduled") // Scheduled, InProgress, Completed, Canceled, NoShow
  assignees     Json      @default("[]")
  notes         String?
  isManual      Boolean   @default(false) // True if manually added to recurring job
  custom        Json      @default("{}")

  // Relations
  org       Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job       Job             @relation(fields: [jobId], references: [id], onDelete: Cascade) // Deleting job deletes all visits
  invoice   Invoice?        @relation(fields: [invoiceId], references: [id], onDelete: SetNull) // Deleting invoice just unlinks visits
  lineItems VisitLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@map("visits")
}

model VisitLineItem {
  id          String   @id @default(cuid())
  visitId     String
  name        String
  description String?
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  order       Int      @default(0)

  // Relations
  visit Visit @relation(fields: [visitId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visit_line_items")
}


model Expense {
  id          String  @id @default(cuid())
  orgId       String
  jobId       String
  description String
  amount      Decimal @db.Decimal(12, 2)
  category    String? // Materials, Labor, Equipment, Travel, etc.
  date        DateTime @default(now())
  receiptUrl  String?
  notes       String?

  // Relations
  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("expenses")
}

model Invoice {
  id            String    @id @default(cuid())
  number        Int       // Auto-incrementing invoice number (per-org unique)
  orgId         String
  jobId         String?   // Optional - can invoice without a job
  clientId      String    // Required - must have client
  propertyId    String?
  visitIds      Json      @default("[]") // Array of visit IDs included in this invoice
  
  // Pricing (calculated from line items at runtime)
  taxRate       Decimal   @default(13) @db.Decimal(5, 2) // Default tax rate (e.g., 13 for 13%)
  
  status        String    @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELED
  issuedAt      DateTime?
  dueAt         DateTime?
  paidAt        DateTime?
  notes         String?
  custom        Json      @default("{}")

  // Relations
  org        Organization     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job        Job?             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  client     Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property   Property?        @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  visits     Visit[]          // Visits that belong to this invoice
  lineItems  InvoiceLineItem[]
  payments   Payment[]
  files      File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@map("invoices")
}

model InvoiceLineItem {
  id          String   @id @default(cuid())
  invoiceId   String
  name        String
  description String?
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(12, 2)
  order       Int      @default(0)

  // Relations
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("invoice_line_items")
}

model Payment {
  id           String   @id @default(cuid())
  number       Int      // Auto-incrementing display number (per-org unique)
  orgId        String
  invoiceId    String
  amount       Decimal  @db.Decimal(12, 2) // Amount paid
  invoiceTotal Decimal  @db.Decimal(12, 2) // Snapshot of invoice total at payment time
  method       String   // cash, credit_card, debit, etransfer, check
  reference    String?  // transaction ID, check number, etc.
  notes        String?
  paidAt       DateTime @default(now())

  // Relations
  org     Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  invoice Invoice      @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, number])
  @@map("payments")
}

// Lookup tables for flexible form ingestion
model Industry {
  id            String         @id @default(cuid())
  slug          String         @unique // "home-cleaning", "office", "airbnb"
  label         String
  active        Boolean        @default(true)
  
  // Relations
  serviceTypes  ServiceType[]
  accessMethods AccessMethod[]
  reasons       Reason[]
  requests      Request[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("industries")
}

model ServiceType {
  id         String    @id @default(cuid())
  industryId String
  slug       String    @unique // "standard", "deep", "recurring", etc.
  label      String
  active     Boolean   @default(true)
  
  // Relations
  industry   Industry  @relation(fields: [industryId], references: [id], onDelete: Cascade)
  requests   Request[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("service_types")
}

model HearAbout {
  id       String    @id @default(cuid())
  slug     String    @unique // "gbp", "google-guaranteed", "brochure", "referral", "other"
  label    String
  active   Boolean   @default(true)
  
  // Relations
  requests Request[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("hear_about")
}

model AccessMethod {
  id         String    @id @default(cuid())
  industryId String?
  slug       String    @unique
  label      String
  active     Boolean   @default(true)
  
  // Relations
  industry   Industry? @relation(fields: [industryId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("access_methods")
}

model Reason {
  id         String    @id @default(cuid())
  industryId String?
  slug       String    @unique
  label      String
  active     Boolean   @default(true)
  
  // Relations
  industry   Industry? @relation(fields: [industryId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reasons")
}

// Utility tables
model Activity {
  id        String   @id @default(cuid())
  orgId     String
  requestId String
  type      String   // NOTE, STATUS_CHANGE, EMAIL, FILE_UPLOAD, SYSTEM
  message   String?
  meta      Json?
  
  // Relations
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  request   Request      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([requestId, createdAt])
  @@map("activities")
}

model File {
  id         String   @id @default(cuid())
  orgId      String
  requestId  String?
  jobId      String?
  invoiceId  String?
  name       String
  url        String
  mimeType   String?
  sizeBytes  Int?
  
  // Relations
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  request    Request?     @relation(fields: [requestId], references: [id], onDelete: SetNull)
  job        Job?         @relation(fields: [jobId], references: [id], onDelete: SetNull)
  invoice    Invoice?     @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  
  @@index([requestId])
  @@index([jobId])
  @@index([invoiceId])
  @@map("files")
}

model OrgCounter {
  id     String @id @default(cuid())
  orgId  String
  scope  String // "client", "request", "estimate", "job", "visit", "invoice", "payment"
  value  Int    @default(0)
  
  // Relations
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  @@unique([orgId, scope])
  @@map("org_counters")
}

// Auth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}