// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  STAFF
}

model Organization {
  id       String @id @default(cuid())
  name     String
  slug     String @unique
  industry String
  settings Json   @default("{}")

  // Relations
  memberships Membership[]
  clients     Client[]
  properties  Property[]
  jobs        Job[]
  lineItems   LineItem[]
  invoices    Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String
  passwordHash String?

  // Relations
  memberships Membership[]
  accounts    Account[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Membership {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   Role

  // Relations
  user User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, orgId])
  @@map("memberships")
}

model Client {
  id        String @id @default(cuid())
  orgId     String
  name      String
  emails    Json   @default("[]")
  phones    Json   @default("[]")
  addresses Json   @default("[]")
  custom    Json   @default("{}")

  // Relations
  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  properties Property[]
  jobs       Job[]
  invoices   Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clients")
}

model Property {
  id       String  @id @default(cuid())
  orgId    String
  clientId String
  address  String
  notes    String?
  custom   Json    @default("{}")

  // Relations
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  jobs   Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("properties")
}

model Job {
  id          String    @id @default(cuid())
  orgId       String
  clientId    String
  propertyId  String?
  title       String
  status      String    @default("Draft")
  scheduledAt DateTime?
  assignees   Json      @default("[]")
  custom      Json      @default("{}")

  // Relations
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  client    Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property  Property?    @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  lineItems LineItem[]
  invoices  Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("jobs")
}

model LineItem {
  id        String  @id @default(cuid())
  orgId     String
  jobId     String
  name      String
  qty       Int
  unitPrice Decimal @db.Decimal(12, 2)
  taxRate   Decimal? @db.Decimal(5, 2)

  // Relations
  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("line_items")
}

model Invoice {
  id       String    @id @default(cuid())
  orgId    String
  jobId    String
  clientId String
  total    Decimal   @db.Decimal(12, 2)
  status   String    @default("Draft")
  issuedAt DateTime?
  dueAt    DateTime?

  // Relations
  org    Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  job    Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  client Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

// Auth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}